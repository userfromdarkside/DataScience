best <- function(state, outcome) {
# Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Valid outcomes and corresponding column indices
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
outcome_columns <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
names(outcome_columns) <- valid_outcomes
# Check if state and outcome are valid
if (!(state %in% outcome_data$State)) {
stop("invalid state")
}
if (!(outcome %in% valid_outcomes)) {
stop("invalid outcome")
}
# Get the column name for the specified outcome
outcome_col <- outcome_columns[outcome]
# Filter data for the given state
state_data <- subset(outcome_data, State == state)
# Convert outcome column to numeric (suppress warnings for NAs)
state_data[[outcome_col]] <- suppressWarnings(as.numeric(state_data[[outcome_col]]))
# Remove rows with NA in the outcome column
state_data <- state_data[!is.na(state_data[[outcome_col]]), ]
# Sort by outcome column and then by Hospital.Name
sorted_data <- state_data[order(state_data[[outcome_col]], state_data$Hospital.Name), ]
# Return the hospital name with the lowest 30-day mortality rate
best_hospital <- sorted_data$Hospital.Name[1]
return(best_hospital)
}
source("best.R")
source("C:/Users/Admin/Desktop/RRR/ProgrammingAssignment3/best.R")
source("best.R")
print(best("TX", "heart attack"))
print(best("TX", "heart failure")) # Expected: "FORT DUNCAN MEDICAL CENTER"
print(best("MD", "heart attack"))  # Expected: "JOHNS HOPKINS HOSPITAL, THE"
print(best("MD", "pneumonia"))
rankhospital <- function(state, outcome, num = "best") {
# Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Define the mapping for outcome to column name
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
outcome_columns <- c("heart attack" = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"heart failure" = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"pneumonia" = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
# Validate state
if (!(state %in% outcome_data$State)) {
stop("invalid state")
}
# Validate outcome
if (!(outcome %in% valid_outcomes)) {
stop("invalid outcome")
}
# Select the correct column based on the outcome
outcome_column <- outcome_columns[outcome]
# Filter data for the given state
state_data <- subset(outcome_data, State == state)
# Convert the outcome column to numeric
state_data[[outcome_column]] <- suppressWarnings(as.numeric(state_data[[outcome_column]]))
# Remove rows with NA values in the outcome column
state_data <- state_data[!is.na(state_data[[outcome_column]]), ]
# Sort the data by the outcome column and then by hospital name
sorted_data <- state_data[order(state_data[[outcome_column]], state_data$Hospital.Name), ]
# Determine the ranking to return
if (num == "best") {
num <- 1
} else if (num == "worst") {
num <- nrow(sorted_data)
} else if (!is.numeric(num) || num <= 0 || num > nrow(sorted_data)) {
return(NA)
}
# Return the hospital name with the given rank
ranked_hospital <- sorted_data$Hospital.Name[num]
return(ranked_hospital)
}
print(rankhospital("TX", "heart failure", 4))
rankall <- function(outcome, num = "best") {
# Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Define the mapping for outcome to column name
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
outcome_columns <- c("heart attack" = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"heart failure" = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"pneumonia" = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
# Validate outcome
if (!(outcome %in% valid_outcomes)) {
stop("invalid outcome")
}
# Select the correct column based on the outcome
outcome_column <- outcome_columns[[outcome]]
# Initialize a list to store results for each state
results <- list()
# Get unique states
states <- unique(outcome_data$State)
# Process each state
for (state in states) {
# Filter data for the given state
state_data <- subset(outcome_data, State == state)
# Convert the outcome column to numeric
state_data[[outcome_column]] <- suppressWarnings(as.numeric(state_data[[outcome_column]]))
# Remove rows with NA values in the outcome column
state_data <- state_data[!is.na(state_data[[outcome_column]]), ]
# Sort the data by the outcome column and then by hospital name
sorted_data <- state_data[order(state_data[[outcome_column]], state_data$Hospital.Name), ]
# Determine the ranking to return
if (num == "best") {
rank_num <- 1
} else if (num == "worst") {
rank_num <- nrow(sorted_data)
} else if (is.numeric(num)) {
rank_num <- as.numeric(num)
} else {
rank_num <- NA
}
# Handle out of range ranks
if (is.na(rank_num) || rank_num > nrow(sorted_data) || rank_num <= 0) {
hospital_name <- NA
} else {
hospital_name <- sorted_data$Hospital.Name[rank_num]
}
# Add the result to the list
results[[state]] <- data.frame(hospital = hospital_name, state = state)
}
# Combine results into a single data frame
result_df <- do.call(rbind, results)
# Sort by state
result_df <- result_df[order(result_df$state), ]
return(result_df)
}
View(best)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
